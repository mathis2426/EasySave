<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="job_created" xml:space="preserve">
    <value>Job created successfully!</value>
  </data>
  <data name="enter_job_number_delete" xml:space="preserve">
    <value>Enter the job number to delete:</value>
  </data>
  <data name="enter_job_number_execute" xml:space="preserve">
    <value>Enter the job number to execute:</value>
  </data>
  <data name="job_deleted" xml:space="preserve">
    <value>Job deleted successfully!</value>
  </data>
  <data name="job_executed" xml:space="preserve">
    <value>Job executed successfully!</value>
  </data>
  <data name="welcome" xml:space="preserve">
    <value>Welcome to the Backup Program!</value>
  </data>
  <data name="description1" xml:space="preserve">
    <value>This program allows you to create and manage backup jobs.</value>
  </data>
  <data name="description2" xml:space="preserve">
    <value>You can create, delete, and execute backup jobs.</value>
  </data>
  <data name="continue" xml:space="preserve">
    <value>Press any key to continue...</value>
  </data>
  <data name="press_return" xml:space="preserve">
    <value>Press any key to return to the main menu...</value>
  </data>
  <data name="main_menu" xml:space="preserve">
    <value>Main Menu</value>
  </data>
  <data name="option1" xml:space="preserve">
    <value>1. Create Backup Job</value>
  </data>
  <data name="option2" xml:space="preserve">
    <value>2. Delete Backup Job</value>
  </data>
  <data name="option3" xml:space="preserve">
    <value>3. Execute Backup Job</value>
  </data>
  <data name="option4" xml:space="preserve">
    <value>4. Change Language</value>
  </data>
  <data name="option5" xml:space="preserve">
    <value>5. Exit</value>
  </data>
  <data name="select_option" xml:space="preserve">
    <value>Please select an option: </value>
  </data>
  <data name="invalid_option" xml:space="preserve">
    <value>Invalid option. Please try again.</value>
  </data>
  <data name="exiting" xml:space="preserve">
    <value>Exiting the program...</value>
  </data>
  <data name="create_job" xml:space="preserve">
    <value>Create Backup Job</value>
  </data>
  <data name="enter_name" xml:space="preserve">
    <value>Enter the name of the job:</value>
  </data>
  <data name="enter_source" xml:space="preserve">
    <value>Enter the source path:</value>
  </data>
  <data name="enter_target" xml:space="preserve">
    <value>Enter the target path:</value>
  </data>
  <data name="select_type" xml:space="preserve">
    <value>Select the type of backup (1 for Full, 2 for Differential):</value>
  </data>
  <data name="invalid_input" xml:space="preserve">
    <value>Invalid input. Please try again.</value>
  </data>
  <data name="list_jobs" xml:space="preserve">
    <value>List of Backup Jobs:</value>
  </data>
  <data name="delete_job" xml:space="preserve">
    <value>Delete Backup Job</value>
  </data>
  <data name="no_jobs" xml:space="preserve">
    <value>No jobs available to delete.</value>
  </data>
  <data name="execute_job" xml:space="preserve">
    <value>Execute Backup Job</value>
  </data>
  <data name="change_language" xml:space="preserve">
    <value>Change Language</value>
  </data>
  <data name="job_name" xml:space="preserve">
    <value>Job Name</value>
  </data>
  <data name="job_source" xml:space="preserve">
    <value>Source Path</value>
  </data>
  <data name="job_target" xml:space="preserve">
    <value>Target Path</value>
  </data>
  <data name="job_type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="invalid_job" xml:space="preserve">
    <value>Invalid job number. Please try again.</value>
  </data>
  <data name="Execute_All_Job" xml:space="preserve">
    <value>Execute all job</value>
  </data>
</root>